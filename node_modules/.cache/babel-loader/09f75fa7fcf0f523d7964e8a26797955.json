{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kevin\\\\OneDrive\\\\Desktop\\\\Projects\\\\word-game\\\\src\\\\components\\\\gameWindow.jsx\";\nimport React, { Component } from 'react';\nimport CharBox from './characterBox';\nimport CharList from './charList';\nimport WordBox from './wordBox';\nimport WordList from './wordList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GameWindow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addWordChar = arr => {\n      //get the box that was clicked\n      const clicked = this.state.charBoxes.filter(box => box.props.id === arr[1]);\n      this.state.invisibleChar.push(clicked); //\n\n      const newList = this.state.charBoxes.filter(box => box.props.id !== arr[1]);\n      this.state.charBoxes = newList;\n      this.setState({\n        char: arr[0]\n      }); //sets char, for debugging\n\n      this.state.wordChars.push(arr[0]); //this is also for debugging\n      //alert(this.state.wordChars);\n    };\n\n    this.removeWordChar = arr => {\n      //alert(\"hapen\");\n      const clicked = this.state.wordBoxes.filter(box => box.props.id === arr[1]);\n      console.log(clicked);\n      this.state.invisibleWord.push(clicked);\n      console.log(this.state.invisibleWord); //get rid of box that was clicked from wordList\n\n      const newList = this.state.wordBoxes.filter(box => box.props.id !== arr[1]);\n      this.state.wordBoxes = newList; //this.setState({char: arr[0]}); //sets char, for debugging\n\n      this.setState({\n        char: arr[0]\n      }); //this is the key to updating the boxes\n\n      this.state.wordChars.push(arr[0]);\n    };\n\n    this.makeCharBoxList = this.makeCharBoxList.bind(this);\n    this.makeCharKeys = this.makeCharKeys.bind(this);\n    this.addWordChar = this.addWordChar.bind(this);\n    this.state = {\n      char: '',\n      //this is for debugging\n      wordChar: '',\n      //this is also for debugging\n      chars: ['来', '不', '及'],\n      //list of chars to use\n      keys: [],\n      //key for each char, counts up to length\n      charBoxes: [],\n      //holds visible boxes\n      invisibleChar: [],\n      //holds invisible boxes\n      invisibleWord: [],\n      //holds invisible wordChars\n      wordBoxes: [],\n      //replace later\n      wordChars: [] //this is for debug\n\n    };\n    this.state.keys = this.makeCharKeys();\n    this.state.charBoxes = this.makeCharBoxList();\n    this.state.wordBoxes = this.makeWordBoxList();\n    this.setState({\n      charBoxes: this.makeCharBoxList()\n    }); //alert(this.state.keys);\n    //this.state.keys =  //construct charKeys\n    //this.state.charBoxes = this.makeCharBoxList();\n    //console.log(this.state.charKeys);\n  }\n  /**\r\n   * Makes list of keys to assign to the CharBoxes in state\r\n   * Only used in constructor\r\n   */\n\n\n  makeCharKeys() {\n    const returned = [];\n\n    for (var i = 0; i < this.state.chars.length; i++) {\n      returned.push(i);\n    } //alert(returned);\n\n\n    return returned;\n  }\n\n  makeCharBoxList() {\n    const listItems = [];\n\n    for (var i = 0; i < this.state.chars.length; i++) {\n      listItems.push( /*#__PURE__*/_jsxDEV(CharBox, {\n        char: this.state.chars[i],\n        id: this.state.keys[i],\n        parentCallback: this.addWordChar\n      }, this.state.keys[i], false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this));\n    } // const listItems = this.props.chars.map((d) => <\n    // CharBox char = {d} \n    // parentCallback = {this.modifyMessage}\n    //\n    // />);\n\n\n    return listItems;\n  }\n\n  makeWordBoxList() {\n    const listItems = [];\n\n    for (var i = 0; i < this.state.chars.length; i++) {\n      listItems.push( /*#__PURE__*/_jsxDEV(CharBox, {\n        char: this.state.chars[i],\n        id: this.state.keys[i],\n        parentCallback: this.removeWordChar\n      }, this.state.keys[i], false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this));\n    }\n\n    return listItems;\n  }\n  /**\r\n   * Parent callback from charList\r\n   * @param {*array} arr [char, int id]\r\n   */\n\n\n  //\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" start \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CharList, {\n        charBoxes: this.state.charBoxes,\n        keys: this.state.keys\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.char\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" reroll \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"word of the turn:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.wordChars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(WordList, {\n          wordBoxes: this.state.wordBoxes,\n          keys: this.state.keys\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default GameWindow;","map":{"version":3,"sources":["C:/Users/kevin/OneDrive/Desktop/Projects/word-game/src/components/gameWindow.jsx"],"names":["React","Component","CharBox","CharList","WordBox","WordList","GameWindow","constructor","props","addWordChar","arr","clicked","state","charBoxes","filter","box","id","invisibleChar","push","newList","setState","char","wordChars","removeWordChar","wordBoxes","console","log","invisibleWord","makeCharBoxList","bind","makeCharKeys","wordChar","chars","keys","makeWordBoxList","returned","i","length","listItems","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport CharBox from './characterBox';\r\nimport CharList from './charList';\r\nimport WordBox from './wordBox';\r\nimport WordList from './wordList';\r\n\r\nclass GameWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.makeCharBoxList = this.makeCharBoxList.bind(this);\r\n        this.makeCharKeys = this.makeCharKeys.bind(this);\r\n        this.addWordChar = this.addWordChar.bind(this);\r\n        this.state = { \r\n            char: '', //this is for debugging\r\n            wordChar: '', //this is also for debugging\r\n            chars: ['来','不','及'], //list of chars to use\r\n            keys: [], //key for each char, counts up to length\r\n            charBoxes: [], //holds visible boxes\r\n            invisibleChar: [], //holds invisible boxes\r\n            invisibleWord: [], //holds invisible wordChars\r\n            wordBoxes: [], //replace later\r\n            wordChars: [], //this is for debug\r\n\r\n        };\r\n        this.state.keys = this.makeCharKeys();\r\n        this.state.charBoxes = this.makeCharBoxList();\r\n        this.state.wordBoxes = this.makeWordBoxList();\r\n        this.setState({charBoxes: this.makeCharBoxList()});\r\n        //alert(this.state.keys);\r\n        //this.state.keys =  //construct charKeys\r\n        //this.state.charBoxes = this.makeCharBoxList();\r\n        //console.log(this.state.charKeys);\r\n    }\r\n    /**\r\n     * Makes list of keys to assign to the CharBoxes in state\r\n     * Only used in constructor\r\n     */\r\n    makeCharKeys(){\r\n        const returned = [];\r\n        for(var i = 0; i <this.state.chars.length; i++){\r\n            returned.push(i);\r\n        }\r\n        //alert(returned);\r\n        return returned;\r\n    }\r\n    \r\n    makeCharBoxList(){\r\n        const listItems = [];\r\n        for(var i = 0; i < this.state.chars.length; i++){\r\n            listItems.push(\r\n                <CharBox\r\n                char = {this.state.chars[i]}\r\n                key = {this.state.keys[i]}\r\n                id = {this.state.keys[i]}\r\n                parentCallback = {this.addWordChar}\r\n                />\r\n            )\r\n        \r\n        }\r\n        // const listItems = this.props.chars.map((d) => <\r\n        // CharBox char = {d} \r\n        // parentCallback = {this.modifyMessage}\r\n        //\r\n        // />);\r\n        return listItems;\r\n    }\r\n\r\n    makeWordBoxList(){\r\n        const listItems = [];\r\n        for(var i = 0; i < this.state.chars.length; i++){\r\n            listItems.push(\r\n                <CharBox\r\n                char = {this.state.chars[i]}\r\n                key = {this.state.keys[i]}\r\n                id = {this.state.keys[i]}\r\n                parentCallback = {this.removeWordChar}\r\n                />\r\n            )\r\n        \r\n        }\r\n\r\n        return listItems;\r\n    }\r\n    /**\r\n     * Parent callback from charList\r\n     * @param {*array} arr [char, int id]\r\n     */\r\n    addWordChar = (arr) => {\r\n            //get the box that was clicked\r\n            const clicked = this.state.charBoxes.filter((box) => box.props.id === arr[1]);\r\n            this.state.invisibleChar.push(clicked);\r\n            //\r\n            const newList = this.state.charBoxes.filter((box) => box.props.id !== arr[1]);\r\n            this.state.charBoxes = newList;\r\n\r\n            this.setState({char: arr[0]}); //sets char, for debugging\r\n            this.state.wordChars.push(arr[0]); //this is also for debugging\r\n            //alert(this.state.wordChars);\r\n    }\r\n    removeWordChar = (arr) => {\r\n            //alert(\"hapen\");\r\n            const clicked = this.state.wordBoxes.filter((box) => box.props.id === arr[1]);\r\n            console.log(clicked);\r\n            this.state.invisibleWord.push(clicked);\r\n            console.log(this.state.invisibleWord);\r\n            //get rid of box that was clicked from wordList\r\n            const newList = this.state.wordBoxes.filter((box) => box.props.id !== arr[1]);\r\n            this.state.wordBoxes = newList;\r\n\r\n            //this.setState({char: arr[0]}); //sets char, for debugging\r\n            this.setState({char: arr[0]});//this is the key to updating the boxes\r\n            this.state.wordChars.push(arr[0]);\r\n    }\r\n    //\r\n    render() { \r\n        return ( \r\n        <div>\r\n            <button> start </button>\r\n            <CharList \r\n            charBoxes = {this.state.charBoxes}\r\n            keys = {this.state.keys}\r\n            />\r\n            <h2>{this.state.char}</h2>\r\n            <button> reroll </button>\r\n            <div>\r\n                word of the turn: \r\n                <div>{this.state.wordChars}</div>\r\n                <WordList\r\n                wordBoxes = {this.state.wordBoxes}\r\n                keys = {this.state.keys}/>\r\n            </div>\r\n        </div>\r\n         );\r\n    }\r\n}\r\n\r\n \r\nexport default GameWindow;"]},"metadata":{},"sourceType":"module"}