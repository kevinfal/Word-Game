{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kevin\\\\OneDrive\\\\Desktop\\\\Projects\\\\word-game\\\\frontend\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport GameWindow from './components/gameWindow';\nimport text from './data/data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: '',\n      words: '',\n      characters: ''\n    };\n  }\n\n  componentDidMount() {\n    this.initData();\n    console.log(\"initialized\");\n    console.log(this.state.data);\n  }\n\n  initData() {\n    //fetch from url\n    fetch(`http://localhost:3001/data`).then(response => response.json()) //make response into json\n    .then(jsonObjs => {\n      this.setState({\n        data: jsonObjs\n      });\n      this.setState({\n        words: jsonObjs.words\n      });\n      this.setState({\n        characters: jsonObjs.characters\n      });\n      console.log(\"recieved\");\n    }); //set state as jsonObjects\n\n    console.log(\"out of .then\"); //const display = this.state.data.map((item) => <p>{item.body}</p>)\n  }\n\n  generateCharList() {\n    var returned = [];\n\n    for (var i = 0; i < 10; i++) {\n      var added = this.state.characters.charAt(Math.floor(Math.random() * this.state.characters.length));\n\n      while (returned.includes(added)) added = this.state.characters.charAt(Math.floor(Math.random() * this.state.characters.length));\n\n      returned.push(added);\n    }\n\n    return returned;\n  }\n\n  render() {\n    //console.log(this.generateCharList());\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GameWindow, {\n        charList: [\"好\", \"号\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*\ntodo:\n  get chars from list (by frequency)\n  get # of chars from input\n  send those chars to new gamewindow\n  check if word made is correct\n  assign points\n  make new gamewindow\n*/\n\n\nexport default App;","map":{"version":3,"sources":["C:/Users/kevin/OneDrive/Desktop/Projects/word-game/frontend/src/App.js"],"names":["React","Component","GameWindow","text","App","constructor","props","state","data","words","characters","componentDidMount","initData","console","log","fetch","then","response","json","jsonObjs","setState","generateCharList","returned","i","added","charAt","Math","floor","random","length","includes","push","render"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC1BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAGnBC,KAHmB,GAGX;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,UAAU,EAAE;AAHN,KAHW;AAElB;;AAMDC,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,QAAL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWC,IAAvB;AACD;;AACDI,EAAAA,QAAQ,GAAE;AACR;AACEG,IAAAA,KAAK,CAAE,4BAAF,CAAL,CACEC,IADF,CACQC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADrB,EACsC;AADtC,KAEEF,IAFF,CAEQG,QAAD,IAAc;AAClB,WAAKC,QAAL,CAAc;AAACZ,QAAAA,IAAI,EAAEW;AAAP,OAAd;AACA,WAAKC,QAAL,CAAc;AAACX,QAAAA,KAAK,EAAEU,QAAQ,CAACV;AAAjB,OAAd;AACA,WAAKW,QAAL,CAAc;AAACV,QAAAA,UAAU,EAAES,QAAQ,CAACT;AAAtB,OAAd;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,KAPF,EAFM,CASD;;AACLD,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAVM,CAWN;AACH;;AACDO,EAAAA,gBAAgB,GAAE;AAChB,QAAIC,QAAQ,GAAG,EAAf;;AAEA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAIC,KAAK,GAAG,KAAKjB,KAAL,CAAWG,UAAX,CAAsBe,MAAtB,CAA6BC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKrB,KAAL,CAAWG,UAAX,CAAsBmB,MAAjD,CAA7B,CAAZ;;AACA,aAAMP,QAAQ,CAACQ,QAAT,CAAkBN,KAAlB,CAAN,EACEA,KAAK,GAAG,KAAKjB,KAAL,CAAWG,UAAX,CAAsBe,MAAtB,CAA6BC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKrB,KAAL,CAAWG,UAAX,CAAsBmB,MAAjD,CAA7B,CAAR;;AACFP,MAAAA,QAAQ,CAACS,IAAT,CAAcP,KAAd;AACD;;AAED,WAAOF,QAAP;AACD;;AACDU,EAAAA,MAAM,GAAG;AACP;AACA,wBACE;AAAA,6BACE,QAAC,UAAD;AACA,QAAA,QAAQ,EAAI,CAAC,GAAD,EAAM,GAAN;AADZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AA/CyB;AAmD5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe5B,GAAf","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport GameWindow from './components/gameWindow';\nimport text from './data/data';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    data: '',\n    words: '',\n    characters: '',\n  }\n  componentDidMount(){\n    this.initData();\n    console.log(\"initialized\");\n    console.log(this.state.data);\n  }\n  initData(){\n    //fetch from url\n      fetch(`http://localhost:3001/data`)\n       .then((response) => response.json()) //make response into json\n       .then((jsonObjs) => {\n         this.setState({data: jsonObjs});\n         this.setState({words: jsonObjs.words});\n         this.setState({characters: jsonObjs.characters});\n         console.log(\"recieved\");\n       }); //set state as jsonObjects\n      console.log(\"out of .then\");\n      //const display = this.state.data.map((item) => <p>{item.body}</p>)\n  }\n  generateCharList(){\n    var returned = [];\n\n    for(var i = 0; i < 10; i ++){\n      var added = this.state.characters.charAt(Math.floor(Math.random() * this.state.characters.length));\n      while(returned.includes(added))\n        added = this.state.characters.charAt(Math.floor(Math.random() * this.state.characters.length))\n      returned.push(added);\n    }\n\n    return returned;\n  }\n  render() {\n    //console.log(this.generateCharList());\n    return (\n      <div>\n        <GameWindow \n        charList = {[\"好\", \"号\"]}/> \n      </div>\n);\n  }\n}\n\n\n/*\ntodo:\n  get chars from list (by frequency)\n  get # of chars from input\n  send those chars to new gamewindow\n  check if word made is correct\n  assign points\n  make new gamewindow\n*/\nexport default App;\n"]},"metadata":{},"sourceType":"module"}