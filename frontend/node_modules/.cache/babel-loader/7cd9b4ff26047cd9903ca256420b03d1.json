{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kevin\\\\OneDrive\\\\Desktop\\\\Projects\\\\word-game\\\\frontend\\\\src\\\\components\\\\gameWindow.jsx\";\nimport React, { Component } from 'react';\nimport CharBox from './characterBox';\nimport CharList from './charList';\nimport WordList from './wordList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GameWindow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addWordChar = arr => {\n      this.state.wordListIds.push(arr[1]);\n      this.setState({\n        charListIds: this.state.charListIds.filter(id => id !== arr[1])\n      });\n    };\n\n    this.removeWordChar = arr => {\n      this.state.charListIds.push(arr[1]);\n      this.setState({\n        wordListIds: this.state.wordListIds.filter(id => id !== arr[1])\n      });\n    };\n\n    this.makeCharKeys = this.makeCharKeys.bind(this);\n    this.addWordChar = this.addWordChar.bind(this);\n    this.makeIds = this.makeIds.bind(this);\n    this.state = {\n      charsAmt: 3,\n      //change later\n      ids: {},\n      //dict for id #: char\n      charListIds: [],\n      wordListIds: [],\n      chars: [],\n      //list of chars to use from parent\n      keys: [] //key for each char, counts up to length\n\n    }; //todo: getchars from some list\n\n    this.makeIds(); //replace later\n\n    this.setState({\n      keys: this.makeCharKeys()\n    });\n  }\n\n  componentDidMount() {\n    console.log(\"mounting gameWindow\");\n  }\n\n  static getDerivedStateFromProps(prop, state) {\n    return {\n      chars: props.charList\n    };\n  }\n  /**\r\n   * init charListIds and state IDs\r\n   */\n\n\n  makeIds() {\n    for (var i = 0; i < this.state.chars.length; i++) {\n      this.state.ids[i] = this.state.chars[i];\n      this.state.charListIds.push(i);\n    }\n  }\n  /**\r\n   * \r\n   * @param {*array} arr - array of ids (from)\r\n   * @param {*int} flag  - 0 means make char box, 1 means make word box\r\n   * @returns \r\n   */\n\n\n  renderBoxes(arr, flag) {\n    const listItems = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      listItems.push( /*#__PURE__*/_jsxDEV(CharBox, {\n        char: this.state.ids[arr[i]],\n        id: arr[i],\n        parentCallback: flag === 0 ? this.addWordChar : this.removeWordChar\n      }, arr[i], false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this));\n    }\n\n    return listItems;\n  }\n  /**\r\n   * Makes list of keys to assign to the CharBoxes in state\r\n   * Only used in constructor\r\n   */\n\n\n  makeCharKeys() {\n    const returned = [];\n\n    for (var i = 0; i < this.state.chars.length; i++) {\n      returned.push(i);\n    }\n\n    return returned;\n  }\n  /**\r\n   * Parent callback from charList\r\n   * @param {*array} arr [char, int id]\r\n   */\n\n\n  //\n  render() {\n    //constsruct boxes to render\n    const charListBoxes = this.renderBoxes(this.state.charListIds, 0);\n    const wordListBoxes = this.renderBoxes(this.state.wordListIds, 1);\n    console.log(this.props.charList);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" start \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CharList, {\n        charBoxes: charListBoxes,\n        keys: this.state.keys\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.char\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" reroll \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"word of the turn:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.wordChars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(WordList, {\n          wordBoxes: wordListBoxes,\n          keys: this.state.keys\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default GameWindow;","map":{"version":3,"sources":["C:/Users/kevin/OneDrive/Desktop/Projects/word-game/frontend/src/components/gameWindow.jsx"],"names":["React","Component","CharBox","CharList","WordList","GameWindow","constructor","props","addWordChar","arr","state","wordListIds","push","setState","charListIds","filter","id","removeWordChar","makeCharKeys","bind","makeIds","charsAmt","ids","chars","keys","componentDidMount","console","log","getDerivedStateFromProps","prop","charList","i","length","renderBoxes","flag","listItems","returned","render","charListBoxes","wordListBoxes","char","wordChars"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport CharBox from './characterBox';\r\nimport CharList from './charList';\r\nimport WordList from './wordList';\r\n\r\n\r\nclass GameWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.makeCharKeys = this.makeCharKeys.bind(this);\r\n        this.addWordChar = this.addWordChar.bind(this);\r\n        this.makeIds = this.makeIds.bind(this);\r\n        this.state = { \r\n            charsAmt: 3, //change later\r\n            ids: {}, //dict for id #: char\r\n            charListIds: [],\r\n            wordListIds: [],\r\n            chars: [], //list of chars to use from parent\r\n            keys: [], //key for each char, counts up to length\r\n        };\r\n        //todo: getchars from some list\r\n        this.makeIds();\r\n        //replace later\r\n        this.setState({keys: this.makeCharKeys()});\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"mounting gameWindow\");\r\n    }\r\n    static getDerivedStateFromProps(prop, state){\r\n        return {chars: props.charList}\r\n    }\r\n    /**\r\n     * init charListIds and state IDs\r\n     */\r\n    makeIds(){\r\n        for(var i = 0; i < this.state.chars.length; i++){\r\n            this.state.ids[i] = this.state.chars[i];\r\n            this.state.charListIds.push(i);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*array} arr - array of ids (from)\r\n     * @param {*int} flag  - 0 means make char box, 1 means make word box\r\n     * @returns \r\n     */\r\n    renderBoxes(arr, flag){\r\n        const listItems = [];\r\n        for(var i = 0; i < arr.length; i++){\r\n            \r\n            listItems.push(\r\n                <CharBox\r\n                char = {this.state.ids[arr[i]]}\r\n                key = {arr[i]}\r\n                id = {arr[i]}\r\n                \r\n                parentCallback = {flag === 0 ? this.addWordChar : this.removeWordChar}\r\n                />\r\n            )\r\n        \r\n        }\r\n        return listItems;\r\n    }\r\n\r\n    /**\r\n     * Makes list of keys to assign to the CharBoxes in state\r\n     * Only used in constructor\r\n     */\r\n    makeCharKeys(){\r\n        const returned = [];\r\n        for(var i = 0; i <this.state.chars.length; i++){\r\n            returned.push(i);\r\n        }\r\n        return returned;\r\n    }\r\n    /**\r\n     * Parent callback from charList\r\n     * @param {*array} arr [char, int id]\r\n     */\r\n    addWordChar = (arr) => {\r\n            this.state.wordListIds.push(arr[1]);\r\n            this.setState({charListIds: this.state.charListIds.filter((id) =>  id !== arr[1])})\r\n    }\r\n    removeWordChar = (arr) => {\r\n            this.state.charListIds.push(arr[1]);\r\n\r\n            this.setState({wordListIds: this.state.wordListIds.filter((id) =>  id !== arr[1])})\r\n    }\r\n    //\r\n    render() { \r\n        //constsruct boxes to render\r\n        const charListBoxes = this.renderBoxes(this.state.charListIds, 0); \r\n        const wordListBoxes = this.renderBoxes(this.state.wordListIds, 1);\r\n        console.log(this.props.charList);\r\n        return ( \r\n            \r\n        <div>\r\n            <button> start </button>\r\n            <CharList \r\n            charBoxes = {charListBoxes}\r\n            keys = {this.state.keys}\r\n            />\r\n            <h2>{this.state.char}</h2>\r\n            <button> reroll </button>\r\n            <div>\r\n                word of the turn: \r\n                <div>{this.state.wordChars}</div>\r\n                <WordList\r\n                wordBoxes = {wordListBoxes}\r\n                keys = {this.state.keys}/>\r\n            </div>\r\n        </div>\r\n         );\r\n    }\r\n}\r\nexport default GameWindow;"]},"metadata":{},"sourceType":"module"}