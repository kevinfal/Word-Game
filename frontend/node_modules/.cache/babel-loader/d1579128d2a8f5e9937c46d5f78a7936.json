{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kevin\\\\OneDrive\\\\Desktop\\\\Projects\\\\word-game\\\\src\\\\components\\\\gameWindow.jsx\";\nimport React, { Component } from 'react';\nimport CharBox from './characterBox';\nimport CharList from './charList';\nimport WordList from './wordList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GameWindow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addWordChar = arr => {\n      //get the box that was clicked\n      const clicked = this.state.charBoxes.filter(box => box.props.id === arr[1]);\n      this.state.invisible.push(clicked); //\n\n      const newList = this.state.charBoxes.filter(box => box.props.id !== arr[1]);\n      this.state.charBoxes = newList;\n      this.setState({\n        char: arr[0]\n      }); //sets char, for debugging\n\n      this.state.wordChars.push(arr[0]); //alert(this.state.wordChars);\n    };\n\n    this.removeWordChar = arr => {\n      const clicked = this.state.invisible.filter(box => box.props.id === arr[1]);\n      this.state.charbox.push(clicked); //get rid of box that was clicked from wordList\n\n      const newList = this.state.invisible.filter(box => box.props.id !== arr[1]);\n      this.state.invisible = newList; //this.setState({char: arr[0]}); //sets char, for debugging\n\n      this.state.wordChars.push(arr[0]);\n    };\n\n    this.makeCharBoxList = this.makeCharBoxList.bind(this);\n    this.makeCharKeys = this.makeCharKeys.bind(this);\n    this.addWordChar = this.addWordChar.bind(this);\n    this.state = {\n      char: '',\n      //this is for debugging\n      chars: ['来', '不', '及'],\n      //list of chars to use\n      keys: [],\n      //key for each char, counts up to length\n      invisible: [true, true, true],\n      //determines which chars are visible in charBox\n      charBoxes: [],\n      //holds visible boxes\n      invisible: [],\n      //holds invisible boxes\n      wordChars: [] //replace later\n\n    };\n    this.state.keys = this.makeCharKeys();\n    this.state.charBoxes = this.makeCharBoxList();\n    this.setState({\n      charBoxes: this.makeCharBoxList()\n    }); //alert(this.state.keys);\n    //this.state.keys =  //construct charKeys\n    //this.state.charBoxes = this.makeCharBoxList();\n    //console.log(this.state.charKeys);\n  }\n  /**\r\n   * Makes list of keys to assign to the CharBoxes in state\r\n   * Only used in constructor\r\n   */\n\n\n  makeCharKeys() {\n    const returned = [];\n\n    for (var i = 0; i < this.state.chars.length; i++) {\n      returned.push(i);\n    } //alert(returned);\n\n\n    return returned;\n  }\n\n  makeCharBoxList() {\n    const listItems = [];\n\n    for (var i = 0; i < this.state.chars.length; i++) {\n      listItems.push( /*#__PURE__*/_jsxDEV(CharBox, {\n        char: this.state.chars[i],\n        id: this.state.keys[i],\n        parentCallback: this.addWordChar\n      }, this.state.keys[i], false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this));\n    } // const listItems = this.props.chars.map((d) => <\n    // CharBox char = {d} \n    // parentCallback = {this.modifyMessage}\n    //\n    // />);\n\n\n    return listItems;\n  }\n  /**\r\n   * Parent callback from charList\r\n   * @param {*array} arr [char, int id]\r\n   */\n\n\n  //\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" start \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CharList, {\n        charBoxes: this.state.charBoxes,\n        chars: this.state.ch,\n        parentCallback: this.addWordChar,\n        keys: this.state.keys\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.char\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" reroll \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"word of the turn:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.wordChars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CharList, {\n          charBoxes: this.state.invisible,\n          chars: this.state.ch,\n          parentCallabck: this.removeWordChar,\n          keys: this.state.keys\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default GameWindow;","map":{"version":3,"sources":["C:/Users/kevin/OneDrive/Desktop/Projects/word-game/src/components/gameWindow.jsx"],"names":["React","Component","CharBox","CharList","WordList","GameWindow","constructor","props","addWordChar","arr","clicked","state","charBoxes","filter","box","id","invisible","push","newList","setState","char","wordChars","removeWordChar","charbox","makeCharBoxList","bind","makeCharKeys","chars","keys","returned","i","length","listItems","render","ch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAC/BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA6DnBC,WA7DmB,GA6DJC,GAAD,IAAS;AACf;AACA,YAAMC,OAAO,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,MAArB,CAA6BC,GAAD,IAASA,GAAG,CAACP,KAAJ,CAAUQ,EAAV,KAAiBN,GAAG,CAAC,CAAD,CAAzD,CAAhB;AACA,WAAKE,KAAL,CAAWK,SAAX,CAAqBC,IAArB,CAA0BP,OAA1B,EAHe,CAIf;;AACA,YAAMQ,OAAO,GAAG,KAAKP,KAAL,CAAWC,SAAX,CAAqBC,MAArB,CAA6BC,GAAD,IAASA,GAAG,CAACP,KAAJ,CAAUQ,EAAV,KAAiBN,GAAG,CAAC,CAAD,CAAzD,CAAhB;AACA,WAAKE,KAAL,CAAWC,SAAX,GAAuBM,OAAvB;AAEA,WAAKC,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAEX,GAAG,CAAC,CAAD;AAAV,OAAd,EARe,CAQgB;;AAC/B,WAAKE,KAAL,CAAWU,SAAX,CAAqBJ,IAArB,CAA0BR,GAAG,CAAC,CAAD,CAA7B,EATe,CAUf;AACP,KAxEkB;;AAAA,SAyEnBa,cAzEmB,GAyEDb,GAAD,IAAS;AAClB,YAAMC,OAAO,GAAG,KAAKC,KAAL,CAAWK,SAAX,CAAqBH,MAArB,CAA6BC,GAAD,IAASA,GAAG,CAACP,KAAJ,CAAUQ,EAAV,KAAiBN,GAAG,CAAC,CAAD,CAAzD,CAAhB;AACA,WAAKE,KAAL,CAAWY,OAAX,CAAmBN,IAAnB,CAAwBP,OAAxB,EAFkB,CAGlB;;AACA,YAAMQ,OAAO,GAAG,KAAKP,KAAL,CAAWK,SAAX,CAAqBH,MAArB,CAA6BC,GAAD,IAASA,GAAG,CAACP,KAAJ,CAAUQ,EAAV,KAAiBN,GAAG,CAAC,CAAD,CAAzD,CAAhB;AACA,WAAKE,KAAL,CAAWK,SAAX,GAAuBE,OAAvB,CALkB,CAOlB;;AACA,WAAKP,KAAL,CAAWU,SAAX,CAAqBJ,IAArB,CAA0BR,GAAG,CAAC,CAAD,CAA7B;AACP,KAlFkB;;AAEf,SAAKe,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKjB,WAAL,GAAmB,KAAKA,WAAL,CAAiBiB,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKd,KAAL,GAAa;AACTS,MAAAA,IAAI,EAAE,EADG;AACC;AACVO,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAFE;AAEa;AACtBC,MAAAA,IAAI,EAAE,EAHG;AAGC;AACVZ,MAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAJF;AAIsB;AAC/BJ,MAAAA,SAAS,EAAE,EALF;AAKM;AACfI,MAAAA,SAAS,EAAE,EANF;AAMM;AACfK,MAAAA,SAAS,EAAE,EAPF,CAOM;;AAPN,KAAb;AAUA,SAAKV,KAAL,CAAWiB,IAAX,GAAkB,KAAKF,YAAL,EAAlB;AACA,SAAKf,KAAL,CAAWC,SAAX,GAAuB,KAAKY,eAAL,EAAvB;AAEA,SAAKL,QAAL,CAAc;AAACP,MAAAA,SAAS,EAAE,KAAKY,eAAL;AAAZ,KAAd,EAlBe,CAmBf;AACA;AACA;AACA;AACH;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,YAAY,GAAE;AACV,UAAMG,QAAQ,GAAG,EAAjB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAE,KAAKnB,KAAL,CAAWgB,KAAX,CAAiBI,MAAnC,EAA2CD,CAAC,EAA5C,EAA+C;AAC3CD,MAAAA,QAAQ,CAACZ,IAAT,CAAca,CAAd;AACH,KAJS,CAKV;;;AACA,WAAOD,QAAP;AACH;;AAEDL,EAAAA,eAAe,GAAE;AACb,UAAMQ,SAAS,GAAG,EAAlB;;AACA,SAAI,IAAIF,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKnB,KAAL,CAAWgB,KAAX,CAAiBI,MAApC,EAA4CD,CAAC,EAA7C,EAAgD;AAC5CE,MAAAA,SAAS,CAACf,IAAV,eACI,QAAC,OAAD;AACA,QAAA,IAAI,EAAI,KAAKN,KAAL,CAAWgB,KAAX,CAAiBG,CAAjB,CADR;AAGA,QAAA,EAAE,EAAI,KAAKnB,KAAL,CAAWiB,IAAX,CAAgBE,CAAhB,CAHN;AAIA,QAAA,cAAc,EAAI,KAAKtB;AAJvB,SAEO,KAAKG,KAAL,CAAWiB,IAAX,CAAgBE,CAAhB,CAFP;AAAA;AAAA;AAAA;AAAA,cADJ;AASH,KAZY,CAab;AACA;AACA;AACA;AACA;;;AACA,WAAOE,SAAP;AACH;AACD;AACJ;AACA;AACA;;;AAuBI;AACAC,EAAAA,MAAM,GAAG;AACL,wBACA;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,QAAD;AACA,QAAA,SAAS,EAAI,KAAKtB,KAAL,CAAWC,SADxB;AAEA,QAAA,KAAK,EAAI,KAAKD,KAAL,CAAWuB,EAFpB;AAGA,QAAA,cAAc,EAAI,KAAK1B,WAHvB;AAIA,QAAA,IAAI,EAAI,KAAKG,KAAL,CAAWiB;AAJnB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAQI;AAAA,kBAAK,KAAKjB,KAAL,CAAWS;AAAhB;AAAA;AAAA;AAAA;AAAA,cARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ,eAUI;AAAA,qDAEI;AAAA,oBAAM,KAAKT,KAAL,CAAWU;AAAjB;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,QAAD;AACA,UAAA,SAAS,EAAI,KAAKV,KAAL,CAAWK,SADxB;AAEA,UAAA,KAAK,EAAI,KAAKL,KAAL,CAAWuB,EAFpB;AAGA,UAAA,cAAc,EAAI,KAAKZ,cAHvB;AAIA,UAAA,IAAI,EAAI,KAAKX,KAAL,CAAWiB;AAJnB;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAsBH;;AA5G8B;;AAgHnC,eAAevB,UAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport CharBox from './characterBox';\r\nimport CharList from './charList';\r\nimport WordList from './wordList';\r\n\r\nclass GameWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.makeCharBoxList = this.makeCharBoxList.bind(this);\r\n        this.makeCharKeys = this.makeCharKeys.bind(this);\r\n        this.addWordChar = this.addWordChar.bind(this);\r\n        this.state = { \r\n            char: '', //this is for debugging\r\n            chars: ['来','不','及'], //list of chars to use\r\n            keys: [], //key for each char, counts up to length\r\n            invisible: [true, true, true], //determines which chars are visible in charBox\r\n            charBoxes: [], //holds visible boxes\r\n            invisible: [], //holds invisible boxes\r\n            wordChars: [], //replace later\r\n\r\n        };\r\n        this.state.keys = this.makeCharKeys();\r\n        this.state.charBoxes = this.makeCharBoxList();\r\n\r\n        this.setState({charBoxes: this.makeCharBoxList()});\r\n        //alert(this.state.keys);\r\n        //this.state.keys =  //construct charKeys\r\n        //this.state.charBoxes = this.makeCharBoxList();\r\n        //console.log(this.state.charKeys);\r\n    }\r\n    /**\r\n     * Makes list of keys to assign to the CharBoxes in state\r\n     * Only used in constructor\r\n     */\r\n    makeCharKeys(){\r\n        const returned = [];\r\n        for(var i = 0; i <this.state.chars.length; i++){\r\n            returned.push(i);\r\n        }\r\n        //alert(returned);\r\n        return returned;\r\n    }\r\n    \r\n    makeCharBoxList(){\r\n        const listItems = [];\r\n        for(var i = 0; i < this.state.chars.length; i++){\r\n            listItems.push(\r\n                <CharBox\r\n                char = {this.state.chars[i]}\r\n                key = {this.state.keys[i]}\r\n                id = {this.state.keys[i]}\r\n                parentCallback = {this.addWordChar}\r\n                />\r\n            )\r\n        \r\n        }\r\n        // const listItems = this.props.chars.map((d) => <\r\n        // CharBox char = {d} \r\n        // parentCallback = {this.modifyMessage}\r\n        //\r\n        // />);\r\n        return listItems;\r\n    }\r\n    /**\r\n     * Parent callback from charList\r\n     * @param {*array} arr [char, int id]\r\n     */\r\n    addWordChar = (arr) => {\r\n            //get the box that was clicked\r\n            const clicked = this.state.charBoxes.filter((box) => box.props.id === arr[1]);\r\n            this.state.invisible.push(clicked);\r\n            //\r\n            const newList = this.state.charBoxes.filter((box) => box.props.id !== arr[1]);\r\n            this.state.charBoxes = newList;\r\n\r\n            this.setState({char: arr[0]}); //sets char, for debugging\r\n            this.state.wordChars.push(arr[0]);\r\n            //alert(this.state.wordChars);\r\n    }\r\n    removeWordChar = (arr) => {\r\n            const clicked = this.state.invisible.filter((box) => box.props.id === arr[1]);\r\n            this.state.charbox.push(clicked);\r\n            //get rid of box that was clicked from wordList\r\n            const newList = this.state.invisible.filter((box) => box.props.id !== arr[1]);\r\n            this.state.invisible = newList;\r\n\r\n            //this.setState({char: arr[0]}); //sets char, for debugging\r\n            this.state.wordChars.push(arr[0]);\r\n    }\r\n    //\r\n    render() { \r\n        return ( \r\n        <div>\r\n            <button> start </button>\r\n            <CharList \r\n            charBoxes = {this.state.charBoxes}\r\n            chars = {this.state.ch}\r\n            parentCallback = {this.addWordChar}\r\n            keys = {this.state.keys}\r\n            />\r\n            <h2>{this.state.char}</h2>\r\n            <button> reroll </button>\r\n            <div>\r\n                word of the turn: \r\n                <div>{this.state.wordChars}</div>\r\n                <CharList\r\n                charBoxes = {this.state.invisible}\r\n                chars = {this.state.ch}\r\n                parentCallabck = {this.removeWordChar}\r\n                keys = {this.state.keys}/>\r\n            </div>\r\n        </div>\r\n         );\r\n    }\r\n}\r\n\r\n \r\nexport default GameWindow;"]},"metadata":{},"sourceType":"module"}